// <auto-generated />
using MediaStorage.Data.Media.Context;
using MediaStorage.Data.Media.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MediaStorage.Data.Media.Migrations
{
    [DbContext(typeof(MediaDataContext))]
    [Migration("20180513120610_initial_migration")]
    partial class initial_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ArtistId");

                    b.Property<int>("LastUpdatedUTC");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("LastUpdatedUTC")
                        .HasName("Idx_Album_LastUpdated");

                    b.HasIndex("Name")
                        .HasName("Idx_Album_Name");

                    b.ToTable("Albums","MediaDb");
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.AlbumAndMediaImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AlbumId");

                    b.Property<bool>("IsCoverImage");

                    b.Property<Guid>("MediaImageGroupId");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("MediaImageGroupId");

                    b.ToTable("AlbumAndMediaImages","MediaDb");
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("GenreId");

                    b.Property<int>("LastUpdatedUTC");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("LastUpdatedUTC")
                        .HasName("Idx_Artist_LastUpdated");

                    b.HasIndex("Name")
                        .HasName("Idx_Artist_Name");

                    b.ToTable("Artists","MediaDb");
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.ArtistAndMediaImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ArtistId");

                    b.Property<bool>("IsCoverImage");

                    b.Property<Guid>("MediaImageGroupId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("MediaImageGroupId");

                    b.ToTable("ArtistAndMediaImages","MediaDb");
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Genres","MediaDb");
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("FileSize");

                    b.Property<string>("Format")
                        .HasMaxLength(16);

                    b.Property<bool>("IsArchived");

                    b.Property<string>("MediaInfoJson");

                    b.Property<Guid>("MediaUploadId");

                    b.Property<string>("TempUrl")
                        .HasMaxLength(255);

                    b.Property<string>("Url")
                        .HasMaxLength(255);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Format");

                    b.HasIndex("MediaUploadId");

                    b.ToTable("MediaFiles","MediaDb");
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.MediaImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("FileSize");

                    b.Property<string>("Format")
                        .HasMaxLength(16);

                    b.Property<Guid>("ImageGroupId");

                    b.Property<int>("ImageSize");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Url")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ImageGroupId");

                    b.ToTable("MediaImages","MediaDb");
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.MediaImageGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsArchived");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("MediaImageGroups","MediaDb");
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.MediaUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateSynced");

                    b.Property<DateTime>("DateUploaded");

                    b.Property<bool>("IsSynced");

                    b.Property<int>("NumOfMedia");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("MediaUploads","MediaDb");
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ArtistId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<Guid>("SongId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("Name")
                        .HasName("Idx_Playlist_Name");

                    b.HasIndex("SongId");

                    b.ToTable("Playlists","MediaDb");
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AlbumId");

                    b.Property<int>("DurationSec");

                    b.Property<int>("LastUpdatedUTC");

                    b.Property<Guid>("MediaId");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int>("TrackNumber");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("LastUpdatedUTC")
                        .HasName("Idx_Song_LastUpdated");

                    b.HasIndex("MediaId");

                    b.ToTable("Songs","MediaDb");
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.Album", b =>
                {
                    b.HasOne("MediaStorage.Data.Media.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.AlbumAndMediaImage", b =>
                {
                    b.HasOne("MediaStorage.Data.Media.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaStorage.Data.Media.Entities.MediaImageGroup", "MediaImageGroup")
                        .WithMany()
                        .HasForeignKey("MediaImageGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.Artist", b =>
                {
                    b.HasOne("MediaStorage.Data.Media.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.ArtistAndMediaImage", b =>
                {
                    b.HasOne("MediaStorage.Data.Media.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaStorage.Data.Media.Entities.MediaImageGroup", "MediaImageGroup")
                        .WithMany()
                        .HasForeignKey("MediaImageGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.MediaFile", b =>
                {
                    b.HasOne("MediaStorage.Data.Media.Entities.MediaUpload", "MediaUpload")
                        .WithMany("MediaFiles")
                        .HasForeignKey("MediaUploadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.MediaImage", b =>
                {
                    b.HasOne("MediaStorage.Data.Media.Entities.MediaImageGroup", "ImageGroup")
                        .WithMany("Images")
                        .HasForeignKey("ImageGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.Playlist", b =>
                {
                    b.HasOne("MediaStorage.Data.Media.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaStorage.Data.Media.Entities.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaStorage.Data.Media.Entities.Song", b =>
                {
                    b.HasOne("MediaStorage.Data.Media.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaStorage.Data.Media.Entities.MediaFile", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
